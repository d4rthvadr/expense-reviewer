// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  directUrl = env("DIRECT_URL")
  url       = env("DATABASE_URL")
}

enum Currency {
  USD
  EUR
  GHS
}

enum Category {
  FOOD
  TRANSPORT
  UTILITIES
  ENTERTAINMENT
  HEALTH
  EDUCATION
  SHOPPING
  MISCELLANEOUS
  PERSONAL_AND_LIFESTYLE
  TRAVEL
  GIFTS_OR_DONATIONS
  HOUSING
  SAVINGS_OR_INVESTMENTS
  INSURANCE
  OTHER
}

enum RecurringPeriod {
  WEEKLY
  MONTHLY
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RecurringTemplateType {
  BUDGET
  EXPENSE
}

model User {
  id                String              @id
  name              String?
  email             String              @unique
  password          String
  createdAt         DateTime            @default(now())
  status            String?
  type              String?
  lastRecurSync     DateTime?
  lastLogin         DateTime?
  currency          Currency?           @default(USD)
  updatedAt         DateTime            @updatedAt
  Budget            Budget[]
  Expense           Expense[]
  RecurringTemplate RecurringTemplate[]
}

model Expense {
  id           String        @id
  name         String
  type         String
  total_amount Float
  status       ExpenseStatus @default(PENDING)
  review       String?
  currency     Currency?     @default(USD)
  createdAt    DateTime      @default(now())
  userId       String?
  updatedAt    DateTime      @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  expenseItem ExpenseItem[]
}

model ExpenseItem {
  id          String    @id
  name        String
  description String?
  qty         Int?
  category    Category  @default(OTHER)
  amount      Float
  amountUsd   Float // Amount converted to USD at creation
  currency    Currency? @default(USD)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  expenseId String
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model Budget {
  id                  String    @id
  name                String?
  userId              String?
  amount              Float
  amountUsd           Float // Amount converted to USD at creation
  isRecurring         Boolean   @default(false)
  recurringTemplateId String? // Only set when isRecurring = true
  currency            Currency? @default(USD)
  category            Category  @default(OTHER)
  description         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user              User?              @relation(fields: [userId], references: [id])
  recurringTemplate RecurringTemplate? @relation(fields: [recurringTemplateId], references: [id], onDelete: SetNull)
}

model RecurringTemplate {
  id              String                @id
  name            String?
  userId          String?
  type            RecurringTemplateType
  amount          Float
  isRecurring     Boolean               @default(true)
  recurringPeriod RecurringPeriod? // Only set when recurring = true
  startDate       DateTime              @default(now())
  endDate         DateTime?
  isActive        Boolean               @default(true)
  currency        Currency?             @default(USD)
  category        Category              @default(OTHER)
  description     String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  user   User?    @relation(fields: [userId], references: [id])
  Budget Budget[]
}
