// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  FOOD
  TRANSPORT
  UTILITIES
  ENTERTAINMENT
  HEALTH
  EDUCATION
  SHOPPING
  MISCELLANEOUS
  PERSONAL_AND_LIFESTYLE
  TRAVEL
  GIFTS_OR_DONATIONS
  HOUSING
  SAVINGS_OR_INVESTMENTS
  INSURANCE
  OTHER
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  status    String?
  type      String?
  lastLogin DateTime?
  updatedAt DateTime  @updatedAt
  Budget    Budget[]
  Expense   Expense[]
}

model Expense {
  id           String   @id @default(cuid())
  name         String
  type         String
  total_amount Float
  createdAt    DateTime @default(now())
  userId       String?
  updatedAt    DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  expenseItem ExpenseItem[]
}

model ExpenseItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  qty         Int?
  category    Category @default(OTHER)
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  expenseId String
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model Budget {
  id          String   @id @default(cuid())
  name        String?
  userId      String?
  amount      Float
  category    Category @default(OTHER)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
}
